<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Fetch Published Rides</title>
    <link rel="stylesheet" href="../public/calculatedistance.css" />
  </head>
  <body style="background-color: #efeae3">
    <div id="main">
      <div id="page1">
        <nav style="display: flex">
          <div style="display: flex; flex: 1; justify-content: space-between">
            <img
              id="logo-image"
              onclick="window.location.href = '/home'"
              src="../public/unidrive-high-resolution-logo-transparent.png"
              alt=""
              style="cursor: pointer"
            />
            <div id="nav-part2">
              <button
                class="nav-butt"
                onclick="window.location.href = '/passenger'"
                style="background-color: #227c70; color: #efeae3"
              >
                <a>Request a Ride</a>
              </button>
              <button
                class="nav-butt"
                onclick="window.location.href = '/publisher'"
              >
                <a>Publish a Ride</a>
              </button>
              <button
                class="nav-butt"
                onclick="window.location.href='/account'"
              >
                <a>Profile</a>
              </button>
            </div>
            <h3>Menu</h3>
          </div>
        </nav>
        <div class="request-details-container">
          <div class="available-drivers-container">
            <h1
              style="
                font-family: sans-serif;
                font-weight: 300;
                margin-bottom: 2rem;
              "
            >
              Available rides:
            </h1>
            <div id="distances-list"></div>
          </div>
          <div class="fair-container">
            <h1
              style="
                font-family: sans-serif;
                font-weight: 300;
                margin-bottom: 2rem;
              "
            >
              Approximate Fare:
            </h1>
            <div id="distances-list"></div>
          </div>
        </div>
      </div>
    </div>
    <!-- Your HTML content here -->
    <!-- Your HTML content here -->
    <div id="fare-output">Fare:</div>
    <button id="female" onclick="window.location.href = 'femalerides'">
      female rides
    </button>

    <script>
      // JavaScript code goes here
      // Fetch location2 from the server
      
      fetch("/getLocation2")
        .then((response) => response.json())
        .then((data) => {
          const location2 = data.location2;
          console.log("Location2:", location2);

          // Now you can use location2 in your fetch request to /fetchPublishedRides and other functions
          fetch("/fetchPublishedRides")
            .then((response) => response.json())
            .then((publishedRides) => {
              // Array to store promises for each distance calculation
              const distancePromises = [];

              // Check if location2 is defined
              if (location2) {
                // Calculate distance between location2 and each published ride's location
                publishedRides.forEach((ride) => {
                  const rideLatitude = parseFloat(
                    ride.coordinates.split(",")[1]
                  );
                  const rideLongitude = parseFloat(
                    ride.coordinates.split(",")[0]
                  );

                  // Push the promise returned by calculateDistance to the array
                  distancePromises.push(
                    calculateDistance(
                      location2[1],
                      location2[0],
                      rideLatitude,
                      rideLongitude
                    ).then((distance) => {
                      if (distance<10){
                        return{
                      firstname: ride.firstname,
                      lastname: ride.lastname,
                      gender: ride.gender,
                      availableSeats: ride.availableSeats,
                      departTime: ride.departTime,
                      email: ride.email,
                      distance,
                       coordinates:ride.coordinates}

                      // rideId: ride._id,
                 } }) 
                    // Resolve the promise with rideId and distance
                  );
                  calculateFare(location2);
                });

                // Wait for all distance calculations to complete
                return Promise.all(distancePromises);
              } else {
                console.error("Location2 is undefined");
                return []; // Return an empty array if location2 is undefined
              }
            })
            .then((distancesList) => {
              // Display distances on the web page
              displayDistances(distancesList);

              // Send the distances data to the server
              sendDistancesToServer(distancesList);
            })
            .catch((error) =>
              console.error("Error fetching published rides:", error)
            );
        });

      // Function to calculate distance between two points using Haversine formula
      async function calculateDistance(lat1, lon1, lat2, lon2) {
        const link =
          "https://api.mapbox.com/directions/v5/mapbox/driving/" +
          lon1 +
          "," +
          lat1 +
          ";" +
          lon2 +
          "," +
          lat2 +
          "?access_token=pk.eyJ1Ijoia2V3YWwyMTA1IiwiYSI6ImNsdTA1NXoyMTA3aWkyaW13OHNqZ2h4bDQifQ.JqrilNyDxi9flLHowJlH3w";
        try {
          const response = await fetch(link);
          const data = await response.json();
          const distanceInMeters = data.routes[0].distance;
          const distanceInKilometers = distanceInMeters / 1000;
          return distanceInKilometers;
        } catch (error) {
          console.error("Error calculating distance:", error);
          throw error;
        }
      }

      // Function to convert degrees to radians
      function deg2rad(deg) {
        return deg * (Math.PI / 180);
      }

      // Function to display distances on the web page
      function displayDistances(distancesList) {
        // Get the distances list element
        const distancesListElement = document.getElementById("distances-list");

        // Clear previous content
        distancesListElement.innerHTML = "";

        // Append distances to the list
        distancesList.forEach((item) => {
          if(item){

            const listItem = document.createElement("div");
          listItem.classList.add("distance-item");
          listItem.addEventListener("click", () => {
            const url = `/otp_verification2?email=${encodeURIComponent(item.email)}&gender=${encodeURIComponent(item.gender)}&coordinates=${encodeURIComponent(item.coordinates)}&firstname=${encodeURIComponent(item.firstname)}&lastname=${encodeURIComponent(item.lastname)}&distance=${encodeURIComponent(item.distance)}`;
             window.location.href = url;
      // Function to be executed on click (replace with your desired logic)
                 sendEmailToPublisher(item.email);
                 

                //  window.location.href = "/otp_verification2";
        });
          // listItem.textContent = `Ride ID: ${item.rideId},Email: ${item.user}, Distance: ${item.distance} km`;
          listItem.textContent = `Name:${item.firstname + item.lastname}
               Distance: ${item.distance} km,    
               availableSeats:${item.availableSeats},    
               Departure At:${item.departTime},
                Gender:${item.gender},
                email:${item.email}`;
          distancesListElement.appendChild(listItem);
       } });

          
         }




      function sendEmailToPublisher(publisherEmail) {
    fetch('/sendEmail', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ email: publisherEmail })
    })
    .then(response => {
        if (response.ok) {
            console.log('Email sent successfully');
        } else {
            console.error('Failed to send email');
        }
    })
    .catch(error => {
        console.error('Error sending email:', error);
    });
}
    //   function displayDistances(distancesList) {
    //   // Get the distances list element
    //   const distancesListElement = document.getElementById("distances-list");

    //   // Clear previous content
    //   distancesListElement.innerHTML = "";

    //   // Append distances to the list
    //   distancesList.forEach((item) => {
    //     const listItem = document.createElement("div");
    //     listItem.classList.add("distance-item"); // Add the class name
    //     listItem.addEventListener("click", () => {
    //   // Function to be executed on click (replace with your desired logic)
    //       console.log(Ride ID: ${item.rideId} clicked!);
    //     });
    //     listItem.textContent = Ride ID: ${item.rideId}, Distance: ${item.distance} km;
    //     distancesListElement.appendChild(listItem);
    //   });
    // }
     
      // Function to send distances data to the server
      function sendDistancesToServer(distancesList) {
        fetch("/calculateDistances", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ distances: distancesList }), // Send the distances data to the server
        })
          .then((response) => response.json())
          .then((data) => {
            console.log("Distances data sent to server:", data);
          })
          .catch((error) =>
            console.error("Error sending distances data to server:", error)
          );
      }
      async function calculateFare(location2) {
        // Assuming fare calculation based on location2 and distancesList
        // You can modify this function according to your fare calculation logic
        const destinationLat = 18.541007;
        const destinationLon = 73.72778;
        const link = `https://api.mapbox.com/directions/v5/mapbox/driving/${location2[0]},${location2[1]};${destinationLon},${destinationLat}?access_token=pk.eyJ1Ijoia2V3YWwyMTA1IiwiYSI6ImNsdTA1NXoyMTA3aWkyaW13OHNqZ2h4bDQifQ.JqrilNyDxi9flLHowJlH3w`;

        try {
          const response = await fetch(link);
          const data = await response.json();
          const distanceInMeters = data.routes[0].distance;
          const distanceInKilometers = distanceInMeters / 1000;

          let totalFare = 0;

          if (distanceInKilometers <= 3) {
            // If distance is less than or equal to 3 km, use base fare for first 3 km
            totalFare += 20;
          } else {
            // If distance is greater than 3 km, calculate fare based on additional km
            totalFare += 20 + (distanceInKilometers - 3) * 7;
          }
          totalFare = totalFare.toFixed(2);
          // Display fare in a separate section
          displayFare(totalFare);
        } catch (error) {
          console.error("Error calculating distance:", error);
          throw error;
        }
      }

      function displayFare(fare) {
        // Get the fare output element
        const fareOutput = document.getElementById("fare-output");

        // Clear previous content
        fareOutput.innerHTML = "";

        // Display fare
        const fareElement = document.createElement("p");
        fareElement.textContent = ` Fare: Rs.${fare}/-`;
        fareOutput.appendChild(fareElement);
      }
    </script>
  </body>
</html>
